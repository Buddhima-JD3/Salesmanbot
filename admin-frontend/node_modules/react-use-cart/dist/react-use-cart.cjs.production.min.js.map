{"version":3,"file":"react-use-cart.cjs.production.min.js","sources":["../src/useLocalStorage.ts","../src/index.tsx"],"sourcesContent":["import * as React from \"react\";\n\nexport default function useLocalStorage(\n  key: string,\n  initialValue: string\n): [string, (value: Function | string) => void] {\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const item =\n        typeof window !== \"undefined\" && window.localStorage.getItem(key);\n\n      return item ? item : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: Function | string) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n\n      setStoredValue(valueToStore);\n\n      window.localStorage.setItem(key, valueToStore);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import * as React from \"react\";\n\nimport useLocalStorage from \"./useLocalStorage\";\n\nexport interface Item {\n  id: string;\n  price: number;\n  quantity?: number;\n  itemTotal?: number;\n  [key: string]: any;\n}\n\ninterface InitialState {\n  id: string;\n  items: Item[];\n  isEmpty: boolean;\n  totalItems: number;\n  totalUniqueItems: number;\n  cartTotal: number;\n  metadata?: Metadata;\n}\n\nexport interface Metadata {\n  [key: string]: any;\n}\n\ninterface CartProviderState extends InitialState {\n  addItem: (item: Item, quantity?: number) => void;\n  removeItem: (id: Item[\"id\"]) => void;\n  updateItem: (id: Item[\"id\"], payload: object) => void;\n  setItems: (items: Item[]) => void;\n  updateItemQuantity: (id: Item[\"id\"], quantity: number) => void;\n  emptyCart: () => void;\n  getItem: (id: Item[\"id\"]) => any | undefined;\n  inCart: (id: Item[\"id\"]) => boolean;\n  clearCartMetadata: () => void;\n  setCartMetadata: (metadata: Metadata) => void;\n  updateCartMetadata: (metadata: Metadata) => void;\n}\n\nexport type Actions =\n  | { type: \"SET_ITEMS\"; payload: Item[] }\n  | { type: \"ADD_ITEM\"; payload: Item }\n  | { type: \"REMOVE_ITEM\"; id: Item[\"id\"] }\n  | {\n      type: \"UPDATE_ITEM\";\n      id: Item[\"id\"];\n      payload: object;\n    }\n  | { type: \"EMPTY_CART\" }\n  | { type: \"CLEAR_CART_META\" }\n  | { type: \"SET_CART_META\"; payload: Metadata }\n  | { type: \"UPDATE_CART_META\"; payload: Metadata };\n\nexport const initialState: any = {\n  items: [],\n  isEmpty: true,\n  totalItems: 0,\n  totalUniqueItems: 0,\n  cartTotal: 0,\n  metadata: {},\n};\n\nconst CartContext = React.createContext<CartProviderState | undefined>(\n  initialState\n);\n\nexport const createCartIdentifier = (len = 12) =>\n  [...Array(len)].map(() => (~~(Math.random() * 36)).toString(36)).join(\"\");\n\nexport const useCart = () => {\n  const context = React.useContext(CartContext);\n\n  if (!context) throw new Error(\"Expected to be wrapped in a CartProvider\");\n\n  return context;\n};\n\nfunction reducer(state: CartProviderState, action: Actions) {\n  switch (action.type) {\n    case \"SET_ITEMS\":\n      return generateCartState(state, action.payload);\n\n    case \"ADD_ITEM\": {\n      const items = [...state.items, action.payload];\n\n      return generateCartState(state, items);\n    }\n\n    case \"UPDATE_ITEM\": {\n      const items = state.items.map((item: Item) => {\n        if (item.id !== action.id) return item;\n\n        return {\n          ...item,\n          ...action.payload,\n        };\n      });\n\n      return generateCartState(state, items);\n    }\n\n    case \"REMOVE_ITEM\": {\n      const items = state.items.filter((i: Item) => i.id !== action.id);\n\n      return generateCartState(state, items);\n    }\n\n    case \"EMPTY_CART\":\n      return initialState;\n\n    case \"CLEAR_CART_META\":\n      return {\n        ...state,\n        metadata: {},\n      };\n\n    case \"SET_CART_META\":\n      return {\n        ...state,\n        metadata: {\n          ...action.payload,\n        },\n      };\n\n    case \"UPDATE_CART_META\":\n      return {\n        ...state,\n        metadata: {\n          ...state.metadata,\n          ...action.payload,\n        },\n      };\n\n    default:\n      throw new Error(\"No action specified\");\n  }\n}\n\nconst generateCartState = (state = initialState, items: Item[]) => {\n  const totalUniqueItems = calculateUniqueItems(items);\n  const isEmpty = totalUniqueItems === 0;\n\n  return {\n    ...initialState,\n    ...state,\n    items: calculateItemTotals(items),\n    totalItems: calculateTotalItems(items),\n    totalUniqueItems,\n    cartTotal: calculateTotal(items),\n    isEmpty,\n  };\n};\n\nconst calculateItemTotals = (items: Item[]) =>\n  items.map(item => ({\n    ...item,\n    itemTotal: item.price * item.quantity!,\n  }));\n\nconst calculateTotal = (items: Item[]) =>\n  items.reduce((total, item) => total + item.quantity! * item.price, 0);\n\nconst calculateTotalItems = (items: Item[]) =>\n  items.reduce((sum, item) => sum + item.quantity!, 0);\n\nconst calculateUniqueItems = (items: Item[]) => items.length;\n\nexport const CartProvider: React.FC<{\n  children?: React.ReactNode;\n  id?: string;\n  defaultItems?: Item[];\n  onSetItems?: (items: Item[]) => void;\n  onItemAdd?: (payload: Item) => void;\n  onItemUpdate?: (payload: object) => void;\n  onItemRemove?: (id: Item[\"id\"]) => void;\n  storage?: (\n    key: string,\n    initialValue: string\n  ) => [string, (value: Function | string) => void];\n  metadata?: Metadata;\n}> = ({\n  children,\n  id: cartId,\n  defaultItems = [],\n  onSetItems,\n  onItemAdd,\n  onItemUpdate,\n  onItemRemove,\n  storage = useLocalStorage,\n  metadata,\n}) => {\n  const id = cartId ? cartId : createCartIdentifier();\n\n  const [savedCart, saveCart] = storage(\n    cartId ? `react-use-cart-${id}` : `react-use-cart`,\n    JSON.stringify({\n      id,\n      ...initialState,\n      items: defaultItems,\n      metadata,\n    })\n  );\n\n  const [state, dispatch] = React.useReducer(reducer, JSON.parse(savedCart));\n  React.useEffect(() => {\n    saveCart(JSON.stringify(state));\n  }, [state, saveCart]);\n\n  const setItems = (items: Item[]) => {\n    dispatch({\n      type: \"SET_ITEMS\",\n      payload: items.map(item => ({\n        ...item,\n        quantity: item.quantity || 1,\n      })),\n    });\n\n    onSetItems && onSetItems(items);\n  };\n\n  const addItem = (item: Item, quantity = 1) => {\n    if (!item.id) throw new Error(\"You must provide an `id` for items\");\n    if (quantity <= 0) return;\n\n    const currentItem = state.items.find((i: Item) => i.id === item.id);\n\n    if (!currentItem && !item.hasOwnProperty(\"price\"))\n      throw new Error(\"You must pass a `price` for new items\");\n\n    if (!currentItem) {\n      const payload = { ...item, quantity };\n\n      dispatch({ type: \"ADD_ITEM\", payload });\n\n      onItemAdd && onItemAdd(payload);\n\n      return;\n    }\n\n    const payload = { ...item, quantity: currentItem.quantity + quantity };\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: item.id,\n      payload,\n    });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const updateItem = (id: Item[\"id\"], payload: object) => {\n    if (!id || !payload) {\n      return;\n    }\n\n    dispatch({ type: \"UPDATE_ITEM\", id, payload });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const updateItemQuantity = (id: Item[\"id\"], quantity: number) => {\n    if (quantity <= 0) {\n      onItemRemove && onItemRemove(id);\n\n      dispatch({ type: \"REMOVE_ITEM\", id });\n\n      return;\n    }\n\n    const currentItem = state.items.find((item: Item) => item.id === id);\n\n    if (!currentItem) throw new Error(\"No such item to update\");\n\n    const payload = { ...currentItem, quantity };\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id,\n      payload,\n    });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const removeItem = (id: Item[\"id\"]) => {\n    if (!id) return;\n\n    dispatch({ type: \"REMOVE_ITEM\", id });\n\n    onItemRemove && onItemRemove(id);\n  };\n\n  const emptyCart = () =>\n    dispatch({\n      type: \"EMPTY_CART\",\n    });\n\n  const getItem = (id: Item[\"id\"]) =>\n    state.items.find((i: Item) => i.id === id);\n\n  const inCart = (id: Item[\"id\"]) => state.items.some((i: Item) => i.id === id);\n\n  const clearCartMetadata = () => {\n    dispatch({\n      type: \"CLEAR_CART_META\",\n    });\n  };\n\n  const setCartMetadata = (metadata: Metadata) => {\n    if (!metadata) return;\n\n    dispatch({\n      type: \"SET_CART_META\",\n      payload: metadata,\n    });\n  };\n\n  const updateCartMetadata = (metadata: Metadata) => {\n    if (!metadata) return;\n\n    dispatch({\n      type: \"UPDATE_CART_META\",\n      payload: metadata,\n    });\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        ...state,\n        getItem,\n        inCart,\n        setItems,\n        addItem,\n        updateItem,\n        updateItemQuantity,\n        removeItem,\n        emptyCart,\n        clearCartMetadata,\n        setCartMetadata,\n        updateCartMetadata,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"names":["useLocalStorage","key","initialValue","React","window","localStorage","getItem","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","console","log","initialState","items","isEmpty","totalItems","totalUniqueItems","cartTotal","metadata","CartContext","createCartIdentifier","len","Array","map","Math","random","toString","join","reducer","state","action","type","generateCartState","payload","item","id","filter","i","Error","calculateUniqueItems","calculateItemTotals","calculateTotalItems","calculateTotal","itemTotal","price","quantity","reduce","total","sum","length","children","cartId","defaultItems","onSetItems","onItemAdd","onItemUpdate","onItemRemove","storage","JSON","stringify","saveCart","parse","dispatch","Provider","find","inCart","some","setItems","addItem","currentItem","hasOwnProperty","updateItem","updateItemQuantity","removeItem","emptyCart","clearCartMetadata","setCartMetadata","updateCartMetadata","context"],"mappings":"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"}
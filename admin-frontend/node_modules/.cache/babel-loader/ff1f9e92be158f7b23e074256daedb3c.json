{"ast":null,"code":"import ValidationError from '../ValidationError';\n\nconst once = cb => {\n  let fired = false;\n  return function () {\n    if (fired) return;\n    fired = true;\n    cb(...arguments);\n  };\n};\n\nexport default function runTests(options, cb) {\n  let {\n    endEarly,\n    tests,\n    args,\n    value,\n    errors,\n    sort,\n    path\n  } = options;\n  let callback = once(cb);\n  let count = tests.length;\n  const nestedErrors = [];\n  errors = errors ? errors : [];\n  if (!count) return errors.length ? callback(new ValidationError(errors, value, path)) : callback(null, value);\n\n  for (let i = 0; i < tests.length; i++) {\n    const test = tests[i];\n    test(args, function finishTestRun(err) {\n      if (err) {\n        // always return early for non validation errors\n        if (!ValidationError.isError(err)) {\n          return callback(err, value);\n        }\n\n        if (endEarly) {\n          err.value = value;\n          return callback(err, value);\n        }\n\n        nestedErrors.push(err);\n      }\n\n      if (--count <= 0) {\n        if (nestedErrors.length) {\n          if (sort) nestedErrors.sort(sort); //show parent errors after the nested ones: name.first, name\n\n          if (errors.length) nestedErrors.push(...errors);\n          errors = nestedErrors;\n        }\n\n        if (errors.length) {\n          callback(new ValidationError(errors, value, path), value);\n          return;\n        }\n\n        callback(null, value);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["D:/SLIIT/3rd Year/2nd Sem/CCP/Dev/Salesmanbot/admin-frontend/node_modules/yup/es/util/runTests.js"],"names":["ValidationError","once","cb","fired","runTests","options","endEarly","tests","args","value","errors","sort","path","callback","count","length","nestedErrors","i","test","finishTestRun","err","isError","push"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,oBAA5B;;AAEA,MAAMC,IAAI,GAAGC,EAAE,IAAI;AACjB,MAAIC,KAAK,GAAG,KAAZ;AACA,SAAO,YAAa;AAClB,QAAIA,KAAJ,EAAW;AACXA,IAAAA,KAAK,GAAG,IAAR;AACAD,IAAAA,EAAE,CAAC,YAAD,CAAF;AACD,GAJD;AAKD,CAPD;;AASA,eAAe,SAASE,QAAT,CAAkBC,OAAlB,EAA2BH,EAA3B,EAA+B;AAC5C,MAAI;AACFI,IAAAA,QADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA,IAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,MALE;AAMFC,IAAAA,IANE;AAOFC,IAAAA;AAPE,MAQAP,OARJ;AASA,MAAIQ,QAAQ,GAAGZ,IAAI,CAACC,EAAD,CAAnB;AACA,MAAIY,KAAK,GAAGP,KAAK,CAACQ,MAAlB;AACA,QAAMC,YAAY,GAAG,EAArB;AACAN,EAAAA,MAAM,GAAGA,MAAM,GAAGA,MAAH,GAAY,EAA3B;AACA,MAAI,CAACI,KAAL,EAAY,OAAOJ,MAAM,CAACK,MAAP,GAAgBF,QAAQ,CAAC,IAAIb,eAAJ,CAAoBU,MAApB,EAA4BD,KAA5B,EAAmCG,IAAnC,CAAD,CAAxB,GAAqEC,QAAQ,CAAC,IAAD,EAAOJ,KAAP,CAApF;;AAEZ,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACQ,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGX,KAAK,CAACU,CAAD,CAAlB;AACAC,IAAAA,IAAI,CAACV,IAAD,EAAO,SAASW,aAAT,CAAuBC,GAAvB,EAA4B;AACrC,UAAIA,GAAJ,EAAS;AACP;AACA,YAAI,CAACpB,eAAe,CAACqB,OAAhB,CAAwBD,GAAxB,CAAL,EAAmC;AACjC,iBAAOP,QAAQ,CAACO,GAAD,EAAMX,KAAN,CAAf;AACD;;AAED,YAAIH,QAAJ,EAAc;AACZc,UAAAA,GAAG,CAACX,KAAJ,GAAYA,KAAZ;AACA,iBAAOI,QAAQ,CAACO,GAAD,EAAMX,KAAN,CAAf;AACD;;AAEDO,QAAAA,YAAY,CAACM,IAAb,CAAkBF,GAAlB;AACD;;AAED,UAAI,EAAEN,KAAF,IAAW,CAAf,EAAkB;AAChB,YAAIE,YAAY,CAACD,MAAjB,EAAyB;AACvB,cAAIJ,IAAJ,EAAUK,YAAY,CAACL,IAAb,CAAkBA,IAAlB,EADa,CACY;;AAEnC,cAAID,MAAM,CAACK,MAAX,EAAmBC,YAAY,CAACM,IAAb,CAAkB,GAAGZ,MAArB;AACnBA,UAAAA,MAAM,GAAGM,YAAT;AACD;;AAED,YAAIN,MAAM,CAACK,MAAX,EAAmB;AACjBF,UAAAA,QAAQ,CAAC,IAAIb,eAAJ,CAAoBU,MAApB,EAA4BD,KAA5B,EAAmCG,IAAnC,CAAD,EAA2CH,KAA3C,CAAR;AACA;AACD;;AAEDI,QAAAA,QAAQ,CAAC,IAAD,EAAOJ,KAAP,CAAR;AACD;AACF,KA9BG,CAAJ;AA+BD;AACF","sourcesContent":["import ValidationError from '../ValidationError';\n\nconst once = cb => {\n  let fired = false;\n  return (...args) => {\n    if (fired) return;\n    fired = true;\n    cb(...args);\n  };\n};\n\nexport default function runTests(options, cb) {\n  let {\n    endEarly,\n    tests,\n    args,\n    value,\n    errors,\n    sort,\n    path\n  } = options;\n  let callback = once(cb);\n  let count = tests.length;\n  const nestedErrors = [];\n  errors = errors ? errors : [];\n  if (!count) return errors.length ? callback(new ValidationError(errors, value, path)) : callback(null, value);\n\n  for (let i = 0; i < tests.length; i++) {\n    const test = tests[i];\n    test(args, function finishTestRun(err) {\n      if (err) {\n        // always return early for non validation errors\n        if (!ValidationError.isError(err)) {\n          return callback(err, value);\n        }\n\n        if (endEarly) {\n          err.value = value;\n          return callback(err, value);\n        }\n\n        nestedErrors.push(err);\n      }\n\n      if (--count <= 0) {\n        if (nestedErrors.length) {\n          if (sort) nestedErrors.sort(sort); //show parent errors after the nested ones: name.first, name\n\n          if (errors.length) nestedErrors.push(...errors);\n          errors = nestedErrors;\n        }\n\n        if (errors.length) {\n          callback(new ValidationError(errors, value, path), value);\n          return;\n        }\n\n        callback(null, value);\n      }\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}